// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                    @unique @default(uuid())
  dateCreated            DateTime                  @default(now())
  name                   String
  username               String                    @unique
  password               String
  profilePicUrl          String?
  bio                    String?
  public                 Boolean                   @default(true)
  isVerified             Boolean                   @default(false)
  DOB                    DateTime?
  posts                  Post[]
  likedPosts             PostLike[]
  comments               Comment[]
  likedComments          CommentLike[]
  followers              Follow[]                  @relation("followers")
  following              Follow[]                  @relation("following")
  savedPosts             SavedPost[]
  conversations          ConversationParticipant[]
  messages               Message[]
  sentFollowRequests     FollowRequest[]           @relation("sentFollowRequests")
  receivedFollowRequests FollowRequest[]           @relation("receivedFollowRequests")
  CommentReply           CommentReply[]
}

model Post {
  id           String         @unique @default(uuid())
  dateCreated  DateTime       @default(now())
  url          String
  caption      String?
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  likes        PostLike[]
  comments     Comment[]
  savedBy      SavedPost[]
  CommentReply CommentReply[]
}

model PostLike {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@unique([postId, userId])
}

model Comment {
  id          String         @unique @default(uuid())
  dateCreated DateTime       @default(now())
  text        String
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  likes       CommentLike[]
  post        Post           @relation(fields: [postId], references: [id])
  postId      String
  replies     CommentReply[] @relation("CommentReplies")

  // parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  // parentId    String?
}

model CommentReply {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  text        String
  likes       String[] @default([])

  parent   Comment @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model CommentLike {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  comment     Comment  @relation(fields: [commentId], references: [id])
  commentId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@unique([userId, commentId])
}

model Follow {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  follower    User     @relation("followers", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  followerId  String
  followingId String

  @@unique([followerId, followingId])
}

model SavedPost {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  Post        Post     @relation(fields: [postId], references: [id])
  postId      String

  @@unique([postId, userId])
}

model Conversation {
  id           String                    @unique @default(uuid())
  dateCreated  DateTime                  @default(now())
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @unique @default(uuid())
  dateCreated    DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@unique([conversationId, userId])
}

model Message {
  id             String       @unique @default(uuid())
  dateCreated    DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
}

model FollowRequest {
  id          String              @id @default(uuid())
  dateCreated DateTime            @default(now())
  sender      User                @relation("sentFollowRequests", fields: [senderId], references: [id])
  senderId    String
  receiver    User                @relation("receivedFollowRequests", fields: [receiverId], references: [id])
  receiverId  String
  createdAt   DateTime            @default(now())
  status      FollowRequestStatus @default(PENDING)

  @@unique([senderId, receiverId])
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
