// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                    @id @default(uuid())
  dateCreated            DateTime                  @default(now())
  name                   String
  username               String                    @unique
  password               String
  profilePicUrl          String?
  bio                    String?
  public                 Boolean                   @default(true)
  isVerified             Boolean                   @default(false)
  DOB                    DateTime?
  tagged                 Post[]                    @relation("Tagged")
  posts                  Post[]
  likedPosts             PostLike[]
  comments               Comment[]
  likedComments          CommentLike[]
  followers              Follow[]                  @relation("followers")
  following              Follow[]                  @relation("following")
  savedPosts             SavedPost[]
  conversations          ConversationParticipant[]
  messages               Message[]
  sentFollowRequests     FollowRequest[]           @relation("sentFollowRequests")
  receivedFollowRequests FollowRequest[]           @relation("receivedFollowRequests")
  commentReply           CommentReply[]
  notificationActor      Notification[]            @relation("ActorNotifications")
  notificationRecipient  Notification[]            @relation("RecipientNotifications")

  @@index([username])
  @@index([name])
}

model Post {
  id            String         @id @default(uuid())
  dateCreated   DateTime       @default(now())
  url           String
  caption       String?
  location      String?
  userId        String
  hideLikeCount Boolean        @default(false)
  hideComments  Boolean        @default(false)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          User[]         @relation("Tagged")
  likes         PostLike[]
  comments      Comment[]
  savedBy       SavedPost[]
  commentReply  CommentReply[]
  notification  Notification[]
}

model PostLike {
  id           String         @id @default(uuid())
  dateCreated  DateTime       @default(now())
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  notification Notification[]

  @@unique([postId, userId])
}

model Comment {
  id           String         @id @default(uuid())
  dateCreated  DateTime       @default(now())
  text         String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  likes        CommentLike[]
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  replies      CommentReply[] @relation("CommentReplies")
  notification Notification[]
}

model CommentReply {
  id           String         @id @default(uuid())
  dateCreated  DateTime       @default(now())
  text         String
  likes        String[]       @default([])
  parent       Comment        @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  notification Notification[]
}

model CommentLike {
  id          String   @id @default(uuid())
  dateCreated DateTime @default(now())
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([userId, commentId])
}

model Follow {
  id           String         @id @default(uuid())
  dateCreated  DateTime       @default(now())
  follower     User           @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following    User           @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followerId   String
  followingId  String
  notification Notification[]

  @@unique([followerId, followingId])
}

model SavedPost {
  id          String   @id @default(uuid())
  dateCreated DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String

  @@unique([postId, userId])
}

model Conversation {
  id           String                    @id @default(uuid())
  dateCreated  DateTime                  @default(now())
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  dateCreated    DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  dateCreated    DateTime     @default(now())
  content        String
  seen           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
}

model FollowRequest {
  id           String         @id @default(uuid())
  dateCreated  DateTime       @default(now())
  sender       User           @relation("sentFollowRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String
  receiver     User           @relation("receivedFollowRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String
  notification Notification[]

  @@unique([senderId, receiverId])
}

model Notification {
  id          String           @id @default(cuid())
  dateCreated DateTime         @default(now())
  type        NotificationType
  isRead      Boolean          @default(false)
  actor       User             @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User             @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  actorId     String

  postId          String?
  post            Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  followId        String?
  follow          Follow?        @relation(fields: [followId], references: [id], onDelete: Cascade)
  followRequestId String?
  followRequest   FollowRequest? @relation(fields: [followRequestId], references: [id], onDelete: Cascade)
  commentId       String?
  comment         Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likeId          String?
  like            PostLike?      @relation(fields: [likeId], references: [id], onDelete: Cascade)
  commentReplyId  String?
  commentReply    CommentReply?  @relation(fields: [commentReplyId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  MENTION
  FOLLOW
  FOLLOW_REQUEST
  COMMENT_REPLY
}
